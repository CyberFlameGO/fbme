
public class SystemHighlighter {

  private static final Color HIGHLIGHT_COLOR = Color.GREEN.darker().darker();

  private final MPSProject project;
  private final CompositeFBTypeDeclaration compositeFb;


  public SystemHighlighter(final MPSProject project, final CompositeFBTypeDeclaration compositeFb) {
    this.project = project;
    this.compositeFb = compositeFb;
  }

  public void highlight(final List<SystemItemValue> itemValues) {
    this.project.getModelAccess().runReadAction({ =>
      final NetworkInstance networkInstance = NetworkInstance.createForCompositeFBType(compositeFb);
      final Editor editor = NetworkInstanceNavigationSupport.navigate(project, networkInstance, false);
      final EditorComponent editorComponent = editor.getCurrentEditorComponent();
      final InspectionManager inspectionManager = InspectionManagerImpl.getInstance(editorComponent);
      final NetworkInspector networkInspector = inspectionManager.installInspector(networkInstance, { => <no statements> });
      networkInspector.clear();

      final FBNetwork fbNethwork = this.compositeFb.getNetwork();
      final list<FunctionBlockDeclaration> components = fbNethwork.getFunctionBlocks();

      for (final SystemItemValue itemValue : itemValues) {
        final SystemItem item = itemValue.getItem();
        if (item.getFbNames().length == 0) { continue; }
        final FunctionBlockDeclaration component = components.findFirst({~it => it.getName() :eq: item.getFbNames()[0]; });
        if (component != null) {
          if (item.getType() == SystemItemType.ECC) {
            networkInspector.setInspectionForComponent(component, new Inspection(itemValue.getValue(), HIGHLIGHT_COLOR));
          } else {
            final set<PortPath<? extends Declaration>> ports = component.getPorts();
            final PortPath<? extends Declaration> port = ports.findFirst({~it => it.getPortTarget().getName() :eq: item.getItemName(); });
            if (port != null) {
              networkInspector.setInspectionForPort(port, new Inspection(itemValue.getValue(), HIGHLIGHT_COLOR));
            }
          }
        }
      }
    });
  }
}