
public class Counterexample {

  public static final string T_GLOBAL = "TGlobal";

  private final SystemItem[] items;
  private final string[] steps;
  private final string[][] values;
  private final string[] timeValues;


  public Counterexample(final SystemItem[] items, final string[] steps, final string[][] values, final string[] timeValues) {
    this.items = items;
    this.steps = steps;
    this.values = values;
    this.timeValues = timeValues;
  }

  public SystemItem[] getItems() {
    return items;
  }

  public string[] getItemSimpleNames() {
    final string[] itemSimpleNames = new string[items.length];
    for (int i = 0; i < itemSimpleNames.length; i++) {
      itemSimpleNames[i] = items[i].getFullName();
    }
    return itemSimpleNames;
  }

  public string[] getSteps() {
    return steps;
  }

  public string[][] getValues() {
    return values;
  }

  public string[] getTimeValues() {
    return timeValues;
  }

  public int length() {
    return steps.length;
  }

  public SystemItem getItem(final string itemSimpleName) {
    for (final SystemItem item : getItems()) {
      if (item.getSimpleName() :eq: itemSimpleName) { return item; }
    }
    return null;
  }

  public SystemItemValue getItemValue(final int itemIndex, final int stepIndex) {
    return new SystemItemValue(items[itemIndex], values[itemIndex][stepIndex]);
  }

  public SystemItemValue getItemValue(final string itemSimpleName, final int stepIndex) {
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      final SystemItem item = items[itemIndex];
      if (item.getSimpleName() :eq: itemSimpleName) { return new SystemItemValue(item, values[itemIndex][stepIndex]); }
    }
    return null;
  }

  public List<SystemItemValue> getItemValues(final int stepIndex) {
    final List<SystemItemValue> itemValues = new ArrayList<SystemItemValue>();
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      final SystemItem item = items[itemIndex];
      itemValues.add(new SystemItemValue(item, values[itemIndex][stepIndex]));
    }
    return itemValues;
  }

  public List<SystemItemValue> getItemValues(final List<string> itemSimpleNames, final int stepIndex) {
    final Set<string> itemSimpleNameSet = new HashSet<string>(itemSimpleNames);
    final List<SystemItemValue> itemValues = new ArrayList<SystemItemValue>();
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      final SystemItem item = items[itemIndex];
      if (itemSimpleNameSet.contains(item.getSimpleName())) {
        itemValues.add(new SystemItemValue(item, values[itemIndex][stepIndex]));
      }
    }
    return itemValues;
  }

  public Map<string, string> getItemSimpleNameToValueMap(final int stepIndex) {
    final Map<string, string> itemToValueMap = new HashMap<string, string>();
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      itemToValueMap.put(items[itemIndex].getSimpleName(), values[itemIndex][stepIndex]);
    }
    return itemToValueMap;
  }

  public int indexOf(final string step) {
    for (int i = 0; i < steps.length; i++) {
      if (steps[i] :eq: step) { return i; }
    }
    return -1;
  }

  public string timeOf(final int stepIndex) {
    return timeValues[stepIndex];
  }
}