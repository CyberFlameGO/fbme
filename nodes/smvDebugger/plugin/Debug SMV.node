action Debug SMV {
  required access: command
  also available in: << ... >>

  caption: Debug SMV
  mnemonic: <no mnemonic>
  description: <no description>
  icon: <no icon>

  construction parameters
    << ... >>

  action context parameters ( always visible = false )
    Project project key: PROJECT required
    MPSProject mpsProject key: MPS_PROJECT required
    node<> node key: NODE required

  isApplicable(event)->boolean {
  this.node.isInstanceOf(CompositeFBTypeDeclaration);
}

  execute(event)->void {
  final tool<Debug SMV> debugger = this.project.tool<Debug SMV>;
  debugger.setProject(this.mpsProject);

  string rawFbPath = IEC61499Persistence.getPathToElement(((node<INamedConcept>) this.node));
  final Path fbPath = Path.of(rawFbPath);
  debugger.setFbPath(fbPath);

  final PlatformRepository platformRepository = PlatformRepositoryProvider.getInstance(this.mpsProject);
  final CompositeFBTypeDeclaration compositeFb = platformRepository.getAdapter(this.node, CompositeFBTypeDeclaration.class);
  debugger.setCompositeFb(compositeFb);

  debugger.openTool(true);
}

  additional methods

  << ... >>
}