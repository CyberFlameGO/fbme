
public class SmvService {
  private final Fb2SmvService fb2SmvService;
  private final NuSmvService nuSmvService;
  private final NutracService nutracService;

  private final CounterexampleParser counterexampleParser;


  public SmvService(final preferenceComponent<SmvBinaryPaths> smvBinaryPaths) {
    fb2SmvService = new Fb2SmvService(Path.of(smvBinaryPaths.fb2SmvPath));
    nuSmvService = new NuSmvService(Path.of(smvBinaryPaths.nuSmvPath));
    nutracService = new NutracService(Path.of(smvBinaryPaths.nutracPath));

    counterexampleParser = new CounterexampleParser();
  }

  public Optional<Counterexample> verify(final Path fbPath, final string specification) {
    try {
      final Path smvPath = fb2SmvService.convertFbToSmv(fbPath);

      final Optional<Path> rawCounterexamplePath = nuSmvService.getRawCounterexample(smvPath, specification);
      Files.delete(smvPath);

      if (rawCounterexamplePath.isEmpty()) { return Optional.empty(); }

      final Path csvCounterexamplePath = nutracService.convertToCsv(rawCounterexamplePath.get());
      Files.delete(rawCounterexamplePath.get());

      final List<string> lines = Files.readAllLines(csvCounterexamplePath);
      Files.delete(csvCounterexamplePath);

      final Counterexample counterexample = counterexampleParser.parse(lines);
      return Optional.of(counterexample);
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
  }
}