
public class NuSmvService extends AbstractIntegrationService {

  private static final string NUSMV_FAIL = "is false";


  public NuSmvService(final Path nuSmvBinaryPath) {
    super(nuSmvBinaryPath);
  }

  public Optional<Path> getRawCounterexample(final Path smvPath, final string specification) {
    addSpecification(smvPath, specification);
    final string output = runProcess(smvPath);

    if (!output.contains(NUSMV_FAIL)) { return Optional.<Path>empty(); }

    final Path rawCounterexamplePath = createRawCounterexampleFile(smvPath, output);
    return Optional.of(rawCounterexamplePath);
  }

  @Override
  protected string getCommand(final Path smvPath) {
    return binaryPath + " " + smvPath;
  }

  private void addSpecification(final Path smvPath, final string specification) {
    try {
      Files.write(smvPath, ("\n\n" + specification).getBytes(), StandardOpenOption.APPEND);
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
  }

  private Path createRawCounterexampleFile(final Path smvPath, final string counterexample) {
    final Path rawCounterexamplePath = newPathOf(smvPath, NutracService.NUTRAC_FILE_EXTENSION);
    try {
      return Files.write(rawCounterexamplePath, counterexample.getBytes());
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
  }
}