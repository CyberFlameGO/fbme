test case ConditionParser extends <none> {
  /*package*/ ConditionParser conditionParser;

  beforeTest {
    conditionParser = new ConditionParser();
  }

  <<after test>>


  test simpleParse {
    assert "(functionBlock.VAR == TRUE)" equals conditionParser.parse("functionBlock.VAR == TRUE").toString();
  }


  test complexParse {
    assert "((functionBlock.VAR1 == TRUE) && (functionBlock.VAR2 == FALSE))" equals conditionParser.parse("functionBlock.VAR1 == TRUE && functionBlock.VAR2 == FALSE").toString();
  }


  test bracketsParse {
    assert "((functionBlock.VAR1 == TRUE) && (functionBlock.VAR2 == FALSE))" equals conditionParser.parse("((functionBlock.VAR1 == TRUE) && (functionBlock.VAR2 == FALSE))").toString();
  }


  test missingRightBracket {
    assert conditionParser.parse("(functionBlock.VAR == TRUE"); throws ConditionParseException <no message>;
  }


  test invalidExpression {
    assert conditionParser.parse("functionBlock.VAR =="); throws ConditionParseException <no message>;
  }


  test simpleEvaluate {
    assert true conditionParser.parse("functionBlock.VAR == TRUE").evaluate(Map.of("functionBlock.VAR", "TRUE"));
  }


  test complexEvaluate {
    assert true conditionParser.parse("functionBlock.VAR1 == TRUE && functionBlock.VAR2 == FALSE").evaluate(Map.of("functionBlock.VAR1", "TRUE", "functionBlock.VAR2", "FALSE"));
  }
}