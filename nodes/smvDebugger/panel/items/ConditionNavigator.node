
public class ConditionNavigator extends HorizontalSpinner implements DebugPanelMVCItem {

  private static final int SPINNER_WIDTH = 300;

  private static final int SPINNER_HEIGHT = 25;

  private final Counterexample counterexample;
  private final ConditionParser conditionParser;

  private DebugPanelModel model;


  public ConditionNavigator(final Counterexample counterexample) {
    this.counterexample = counterexample;
    this.conditionParser = new ConditionParser();
  }

  @Override
  public void setPanelModel(final DebugPanelModel model) {
    this.model = model;
    setModel(model.getConditionModel());
  }

  @Override
  public void initView() {
    setPreferredSize(new Dimension(SPINNER_WIDTH, SPINNER_HEIGHT));
    getConditionField().setEditable(true);
  }

  @Override
  public void initController() {
    for (final Component component : getComponents()) {
      final string componentName = component.getName();
      if (componentName :eq: HorizontalSpinnerUI.NEXT_BUTTON_NAME) {
        final JButton nextButton = (JButton) component;
        nextButton.addActionListener({final ActionEvent event => processAction({final Integer stepIndex => stepIndex < counterexample.length(); }, {final Integer stepIndex => stepIndex + 1; }); });
      } else if (componentName :eq: HorizontalSpinnerUI.PREVIOUS_BUTTON_NAME) {
        final JButton previousButton = (JButton) component;
        previousButton.addActionListener({final ActionEvent event => processAction({final Integer stepIndex => stepIndex >= 0; }, {final Integer stepIndex => stepIndex - 1; }); });
      }
    }
  }

  private void processAction(final Predicate<Integer> stopPredicate, final Function<Integer, Integer> stepFunction) {
    final string condition = (string) getConditionField().getText();
    final Expression expression;
    try {
      expression = conditionParser.parse(condition);
    } catch (final ConditionParseException e) {
      JOptionPane.showMessageDialog(null, e.getMessage());
      return;
    }
    final int currentStepIndex = model.getStepIndexModel().getCurrentStepIndex();
    for (int stepIndex = stepFunction.apply(currentStepIndex); stopPredicate.test(stepIndex); stepIndex = stepFunction.apply(stepIndex)) {
      final Map<string, string> itemSimpleNameToValueMap = counterexample.getItemSimpleNameToValueMap(stepIndex);
      if (expression.evaluate(itemSimpleNameToValueMap)) {
        model.getStepIndexModel().setStepIndex(stepIndex);
        return;
      }
    }
  }

  private JFormattedTextField getConditionField() {
    for (final Component component : getComponents()) {
      if (component instanceof JSpinner.DefaultEditor) {
        final JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) component;
        return editor.getTextField();
      }
    }
    return null;
  }
}