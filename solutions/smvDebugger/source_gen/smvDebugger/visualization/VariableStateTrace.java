package smvDebugger.visualization;

/*Generated by MPS */

import javax.swing.JPanel;
import jetbrains.mps.project.MPSProject;
import org.fbme.lib.iec61499.declarations.CompositeFBTypeDeclaration;
import smvDebugger.nusmv.Counterexample;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import java.awt.Dimension;
import javax.swing.BorderFactory;
import java.awt.Color;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.ScrollPaneConstants;
import smvDebugger.nusmv.VariableData;
import java.util.List;
import smvDebugger.commons.CommonUtils;
import java.util.ArrayList;
import java.util.Set;
import org.fbme.lib.iec61499.fbnetwork.FBNetworkConnection;

public class VariableStateTrace extends JPanel {
  private final MPSProject project;
  private final CompositeFBTypeDeclaration compositeFB;
  private final Counterexample counterexample;

  private DefaultTableModel tableModel;
  private JTable table;
  private final JScrollPane scrollPane;
  private int counter = 0;

  public VariableStateTrace(final MPSProject project, final CompositeFBTypeDeclaration compositeFB, final Counterexample counterexample) {
    this.project = project;
    this.compositeFB = compositeFB;
    this.counterexample = counterexample;

    setPreferredSize(new Dimension(300, 200));
    setBorder(BorderFactory.createLineBorder(Color.GRAY));

    tableModel = new DefaultTableModel() {
      @Override
      public boolean isCellEditable(final int row, final int column) {
        return false;
      }
    };

    table = new JTable(tableModel);
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    table.setTableHeader(null);
    table.setColumnSelectionAllowed(true);
    table.setRowSelectionAllowed(false);

    final TableColumnModel columnModel = table.getColumnModel();
    for (int i = 0; i < columnModel.getColumnCount(); i++) {
      final TableColumn column = columnModel.getColumn(i);
      final int width = 100;
      column.setPreferredWidth(width);
    }

    scrollPane = new JScrollPane(table);
    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setPreferredSize(new Dimension(300, 200));


    add(scrollPane);
  }

  public void updateTrace(final int varIndex, final int stateIndex) {
    final VariableData var = counterexample.vars()[varIndex];
    final List<List<String>> trace = getTrace(var.fbName(), var.portName(), var.isVarPort());
    final String[][] data = CommonUtils.to2dArray(trace);

    tableModel = new DefaultTableModel() {
      @Override
      public boolean isCellEditable(final int row, final int column) {
        return false;
      }
    };
    for (String[] path : data) {
      tableModel.addColumn(null, path);
    }
    table.setModel(tableModel);
    final TableColumnModel columnModel = table.getColumnModel();
    for (int i = 0; i < columnModel.getColumnCount(); i++) {
      final TableColumn column = columnModel.getColumn(i);
      final int width = 260;
      column.setPreferredWidth(width);
    }
  }

  private List<List<String>> getTrace(final String fbName, final String portName, final boolean isVar) {
    final List<List<String>> trace = new ArrayList<List<String>>();
    return trace;
  }

  private void traverse(final Set<FBNetworkConnection> connections, final List<List<String>> traverse) {
  }
}
