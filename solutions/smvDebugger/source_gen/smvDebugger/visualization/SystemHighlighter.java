package smvDebugger.visualization;

/*Generated by MPS */

import java.awt.Color;
import jetbrains.mps.project.MPSProject;
import org.fbme.lib.iec61499.declarations.CompositeFBTypeDeclaration;
import java.util.List;
import smvDebugger.model.SystemItemValue;
import org.fbme.lib.iec61499.instances.NetworkInstance;
import jetbrains.mps.openapi.editor.Editor;
import org.fbme.ide.richediting.editor.NetworkInstanceNavigationSupport;
import jetbrains.mps.openapi.editor.EditorComponent;
import org.fbme.ide.richediting.inspections.InspectionManager;
import org.fbme.ide.richediting.inspections.InspectionManagerImpl;
import org.fbme.ide.richediting.inspections.NetworkInspector;
import org.fbme.lib.iec61499.fbnetwork.FBNetwork;
import org.fbme.lib.iec61499.fbnetwork.FunctionBlockDeclaration;
import smvDebugger.model.SystemItem;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import smvDebugger.model.SystemItemType;
import org.fbme.ide.richediting.inspections.Inspection;
import java.util.Set;
import org.fbme.lib.iec61499.fbnetwork.PortPath;
import org.fbme.lib.common.Declaration;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class SystemHighlighter {
  private static final Color HIGHLIGHT_COLOR = Color.GREEN.darker().darker();

  private final MPSProject project;
  private final CompositeFBTypeDeclaration compositeFb;

  public SystemHighlighter(final MPSProject project, final CompositeFBTypeDeclaration compositeFb) {
    this.project = project;
    this.compositeFb = compositeFb;
  }

  public void highlight(final List<SystemItemValue> itemValues) {
    this.project.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        final NetworkInstance networkInstance = NetworkInstance.createForCompositeFBType(compositeFb);
        final Editor editor = NetworkInstanceNavigationSupport.navigate(project, networkInstance, false);
        final EditorComponent editorComponent = editor.getCurrentEditorComponent();
        final InspectionManager inspectionManager = InspectionManagerImpl.getInstance(editorComponent);
        final NetworkInspector networkInspector = inspectionManager.installInspector(networkInstance, new Runnable() {
          public void run() {
          }
        });
        networkInspector.clear();

        final FBNetwork fbNethwork = SystemHighlighter.this.compositeFb.getNetwork();
        final List<FunctionBlockDeclaration> components = fbNethwork.getFunctionBlocks();

        for (final SystemItemValue itemValue : itemValues) {
          final SystemItem item = itemValue.getItem();
          if (item.getFbNames().length == 0) {
            continue;
          }
          final FunctionBlockDeclaration component = ListSequence.fromList(components).findFirst(new IWhereFilter<FunctionBlockDeclaration>() {
            public boolean accept(FunctionBlockDeclaration it) {
              return Objects.equals(it.getName(), item.getFbNames()[0]);
            }
          });
          if (component != null) {
            if (item.getType() == SystemItemType.ECC) {
              networkInspector.setInspectionForComponent(component, new Inspection(itemValue.getValue(), HIGHLIGHT_COLOR));
            } else {
              final Set<PortPath<? extends Declaration>> ports = component.getPorts();
              final PortPath<? extends Declaration> port = SetSequence.fromSet(ports).findFirst(new IWhereFilter<PortPath<? extends Declaration>>() {
                public boolean accept(PortPath<? extends Declaration> it) {
                  return Objects.equals(it.getPortTarget().getName(), item.getItemName());
                }
              });
              if (port != null) {
                networkInspector.setInspectionForPort(port, new Inspection(itemValue.getValue(), HIGHLIGHT_COLOR));
              }
            }
          }
        }
      }
    });
  }
}
