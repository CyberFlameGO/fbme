package smvDebugger.nusmv;

/*Generated by MPS */

import java.util.Optional;
import java.nio.file.Path;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.io.IOException;

public class NuSmvIntegration {
  private static final String NUSMV_COMMAND = "nusmv";
  private static final String NUSMV_SUCCESS = "Success";

  public static Optional<Counterexample> getCounterexample(final Path smvPath, final String specification) {
    addSpecification(smvPath, specification);

    final ProcessBuilder builder = new ProcessBuilder();
    builder.command(getCommand(smvPath));

    String response;
    try {
      final Process process = builder.start();
      process.waitFor();

      final BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
      final StringBuilder sb = new StringBuilder();
      String line = "";
      while ((line = reader.readLine()) != null) {
        sb.append(line).append("\n");
      }

      sb.length();

      response = sb.toString();
    } catch (final Exception e) {
      throw new RuntimeException(e);
    }

    if (response.contains(NUSMV_SUCCESS)) {
      return Optional.empty();
    }


    return <!TextGen not found for 'jetbrains.mps.baseLanguage.structure.Expression'!>;
  }

  private static void addSpecification(final Path smvPath, final String specification) {
    try {
      Files.write(smvPath, ("\n" + specification).getBytes(), StandardOpenOption.APPEND);
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
  }

  private static String getCommand(final Path smvPath) {
    return NUSMV_COMMAND + smvPath;
  }
}
