package smvDebugger.panel;

/*Generated by MPS */

import smvDebugger.model.Counterexample;
import smvDebugger.visualization.SystemHighlighter;
import smvDebugger.panel.items.StateChanger;
import smvDebugger.panel.items.DeprecatedStateTable;
import smvDebugger.visualization.BacktraceService;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.JSpinner;
import java.util.List;
import smvDebugger.visualization.HiglhightedItem;
import smvDebugger.common.ArrayUtils;
import smvDebugger.panel.condition.Expression;
import smvDebugger.panel.condition.ConditionParser;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import smvDebugger.model.SystemItem;
import java.util.ArrayList;

public class EventManager {
  public static void manageEvents(final Counterexample counterexample, final SystemHighlighter highlighter, final StateChanger changer, final DeprecatedStateTable table, final BacktraceService backtrace) {
    changer.addStepListener(new ChangeListener() {
      public void stateChanged(final ChangeEvent e) {
        final JSpinner spinner = (JSpinner) e.getSource();
        final String curState = (String) spinner.getValue();
        final int stateIndex = counterexample.indexOf(curState);
        highlighter.???();

        final List<HiglhightedItem> objects = ArrayUtils.???(counterexample.???(), stateIndex);
        highlighter.highlight(objects);

        changer.setTime(counterexample.???().???(stateIndex));

        table.higlightHeaderColumn(stateIndex);
        table.moveScroll(stateIndex);
      }
    });

    changer.addConditionListener(new ChangeListener() {
      public void stateChanged(final ChangeEvent e) {
        final JSpinner spinner = (JSpinner) e.getSource();
        final String curCondition = (String) spinner.getValue();
        final Expression expr = new ConditionParser().parse(curCondition);
        final String curState = (String) changer.stepSpinner.getValue();
        final int stateIndex = counterexample.indexOf(curState);

        int resultStateIndex = stateIndex;
        for (int i = stateIndex + 1; i < counterexample.size(); i++) {
          if (expr.evaluate(counterexample.getItemToValueMap(i))) {
            resultStateIndex = i;
            break;
          }
        }

        if (resultStateIndex != stateIndex) {
          highlighter.???();

          final List<HiglhightedItem> objects = ArrayUtils.???(counterexample.???(), resultStateIndex);
          highlighter.highlight(objects);

          changer.setTime(counterexample.???().???(resultStateIndex));
          changer.stepSpinner.setValue(counterexample.???()[resultStateIndex]);

          table.higlightHeaderColumn(resultStateIndex);
          table.moveScroll(resultStateIndex);

        }
      }
    });

    table.addSelectionListener(new ListSelectionListener() {
      public void valueChanged(final ListSelectionEvent e) {
        final int selectedRow = table.getSelectedRow();
        final int selectedColumn = table.getSelectedColumn();

        final SystemItem var = counterexample.???()[selectedRow];
        final List<String> relatedObjects = backtrace.getRelatedItemSimpleNames(var, var.???(selectedColumn - 1));
        final List<HiglhightedItem> objects = new ArrayList<HiglhightedItem>();
        for (final String related : relatedObjects) {
          final String[] parts = related.split(".");
          final String fbName = parts[0];
          final String componentName = parts[1];
          final SystemItem curVar = counterexample.getItem(related);
          objects.add(new HiglhightedItem(fbName, componentName, curVar.???()[selectedColumn - 1], curVar.???()));
        }
        highlighter.???();
        highlighter.highlight(objects);
      }
    });
  }
}
