package smvDebugger.panel;

/*Generated by MPS */

import javax.swing.JPanel;
import java.awt.Color;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import smvDebugger.nusmv.Counterexample;
import javax.swing.table.DefaultTableModel;
import smvDebugger.commons.CommonUtils;
import smvDebugger.nusmv.VariableData;
import java.awt.Component;
import javax.swing.table.TableCellRenderer;
import java.util.Objects;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.ScrollPaneConstants;
import java.awt.Dimension;
import javax.swing.event.ListSelectionListener;
import javax.swing.JScrollBar;
import javax.swing.table.DefaultTableCellRenderer;

public class StateTable extends JPanel {
  private static final String FIRST_COLUMN_NAME = "Variables/States";
  private static final Color DEFAULT_CELL_COLOR = Color.WHITE;
  private static final Color CHANGE_CELL_COLOR = Color.GREEN;
  private static final int FIRST_COLUMN_WIDTH = 360;
  private static final int OTHER_COLUMN_WIDTH = 80;
  private static final int SCROLL_PANE_WIDTH = 780;
  private static final int SCROLL_PANE_HEIGHT = 360;

  private final JTable table;
  private final JScrollPane scrollPane;
  private final int statesNum;
  private final ColumnHeaderRenderer headerRenderer;

  public StateTable(final Counterexample counterexample) {

    final DefaultTableModel tableModel = new DefaultTableModel() {
      @Override
      public boolean isCellEditable(final int row, final int column) {
        return false;
      }
    };

    final Object[] header = CommonUtils.concat(FIRST_COLUMN_NAME, counterexample.states());
    tableModel.setColumnIdentifiers(header);

    for (int i = 0; i < counterexample.vars().length; i++) {
      final VariableData variable = counterexample.vars()[i];
      final String simpleName = variable.simpleName();
      if (simpleName != null) {
        tableModel.addRow(CommonUtils.concat(simpleName, variable.values()));
      }
    }

    headerRenderer = new ColumnHeaderRenderer();

    table = new JTable(tableModel) {
      @Override
      public Component prepareRenderer(final TableCellRenderer renderer, final int row, final int column) {
        final Component component = super.prepareRenderer(renderer, row, column);
        if (!(Objects.equals(component.getBackground(), getSelectionBackground()))) {
          Color color = Color.WHITE;

          if (column > 1) {
            final String curValue = (String) getValueAt(row, column);
            final String prevValue = (String) getValueAt(row, column - 1);

            if (!(Objects.equals(curValue, prevValue))) {
              color = Color.GREEN;
            }
          }

          component.setBackground(color);
          color = null;
        }
        return component;
      }
    };
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    final TableColumnModel columnModel = table.getColumnModel();
    for (int i = 0; i < columnModel.getColumnCount(); i++) {
      final TableColumn column = columnModel.getColumn(i);
      int width = (i == 0 ? FIRST_COLUMN_WIDTH : OTHER_COLUMN_WIDTH);
      column.setPreferredWidth(width);
    }
    table.setCellSelectionEnabled(true);

    scrollPane = new JScrollPane(table);
    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setPreferredSize(new Dimension(SCROLL_PANE_WIDTH, SCROLL_PANE_HEIGHT));

    statesNum = counterexample.states().length;

    add(scrollPane);
  }

  public void addSelectionListener(final ListSelectionListener selectionListener) {
    table.getSelectionModel().addListSelectionListener(selectionListener);
  }

  public int getSelectedRow() {
    return table.getSelectedRow();
  }

  public int getSelectedColumn() {
    return table.getSelectedColumn();
  }

  public void higlightHeaderColumn(final int stateIndex) {
    headerRenderer.setStateIndex(stateIndex);
  }

  public void moveScroll(final int stateIndex) {
    final JScrollBar scrollBar = scrollPane.getHorizontalScrollBar();
    final double percent = ((double) stateIndex) / statesNum;
    final double value = scrollBar.getMaximum() * percent;
    scrollPane.getHorizontalScrollBar().setValue((int) value);
  }

  private static class ColumnHeaderRenderer extends DefaultTableCellRenderer {
    private int stateIndex = 0;

    @Override
    public Component getTableCellRendererComponent(final JTable table, final Object value, final boolean isSelected, final boolean hasFocus, final int row, final int column) {
      final Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

      if (column == stateIndex + 1) {
        setBackground(Color.DARK_GRAY);
        component.setBackground(Color.DARK_GRAY);
        repaint();
      }

      return component;
    }

    public void setStateIndex(final int stateIndex) {
      this.stateIndex = stateIndex;
    }
  }
}
