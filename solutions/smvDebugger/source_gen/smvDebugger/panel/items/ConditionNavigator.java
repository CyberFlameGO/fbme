package smvDebugger.panel.items;

/*Generated by MPS */

import smvDebugger.panel.mvc.DebugPanelMVCItem;
import smvDebugger.model.Counterexample;
import smvDebugger.panel.condition.ConditionParser;
import smvDebugger.panel.mvc.DebugPanelModel;
import java.awt.Dimension;
import java.awt.Component;
import java.util.Objects;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.function.Predicate;
import java.util.function.Function;
import smvDebugger.panel.condition.Expression;
import smvDebugger.panel.condition.ConditionParseException;
import javax.swing.JOptionPane;
import java.util.Map;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;

public class ConditionNavigator extends HorizontalSpinner implements DebugPanelMVCItem {
  private static final int SPINNER_WIDTH = 300;
  private static final int SPINNER_HEIGHT = 25;

  private final Counterexample counterexample;
  private final ConditionParser conditionParser;

  private DebugPanelModel model;

  public ConditionNavigator(final Counterexample counterexample) {
    this.counterexample = counterexample;
    this.conditionParser = new ConditionParser();
  }

  @Override
  public void setPanelModel(final DebugPanelModel model) {
    this.model = model;
    setModel(model.getConditionModel());
  }

  @Override
  public void initView() {
    setPreferredSize(new Dimension(SPINNER_WIDTH, SPINNER_HEIGHT));
    getConditionField().setEditable(true);
  }

  @Override
  public void initController() {
    for (final Component component : getComponents()) {
      final String componentName = component.getName();
      if (Objects.equals(componentName, HorizontalSpinnerUI.NEXT_BUTTON_NAME)) {
        final JButton nextButton = (JButton) component;
        nextButton.addActionListener(new ActionListener() {
          public void actionPerformed(final ActionEvent event) {
            processAction(new Predicate<Integer>() {
              public boolean test(final Integer stepIndex) {
                return stepIndex < counterexample.length();
              }
            }, new Function<Integer, Integer>() {
              public Integer apply(final Integer stepIndex) {
                return stepIndex + 1;
              }
            });
          }
        });
      } else if (Objects.equals(componentName, HorizontalSpinnerUI.PREVIOUS_BUTTON_NAME)) {
        final JButton previousButton = (JButton) component;
        previousButton.addActionListener(new ActionListener() {
          public void actionPerformed(final ActionEvent event) {
            processAction(new Predicate<Integer>() {
              public boolean test(final Integer stepIndex) {
                return stepIndex >= 0;
              }
            }, new Function<Integer, Integer>() {
              public Integer apply(final Integer stepIndex) {
                return stepIndex - 1;
              }
            });
          }
        });
      }
    }
  }

  private void processAction(final Predicate<Integer> stopPredicate, final Function<Integer, Integer> stepFunction) {
    final String condition = (String) getConditionField().getText();
    final Expression expression;
    try {
      expression = conditionParser.parse(condition);
    } catch (final ConditionParseException e) {
      JOptionPane.showMessageDialog(null, e.getMessage());
      return;
    }
    final int currentStepIndex = model.getStepIndexModel().getCurrentStepIndex();
    for (int stepIndex = stepFunction.apply(currentStepIndex); stopPredicate.test(stepIndex); stepIndex = stepFunction.apply(stepIndex)) {
      final Map<String, String> itemSimpleNameToValueMap = counterexample.getItemSimpleNameToValueMap(stepIndex);
      if (expression.evaluate(itemSimpleNameToValueMap)) {
        model.getStepIndexModel().setStepIndex(stepIndex);
        return;
      }
    }
  }

  private JFormattedTextField getConditionField() {
    for (final Component component : getComponents()) {
      if (component instanceof JSpinner.DefaultEditor) {
        final JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) component;
        return editor.getTextField();
      }
    }
    return null;
  }
}
