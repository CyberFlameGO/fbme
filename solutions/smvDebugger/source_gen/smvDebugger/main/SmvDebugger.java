package smvDebugger.main;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import smvDebugger.integration.Fb2SmvService;
import smvDebugger.integration.NuSmvService;
import smvDebugger.integration.NutracService;
import smvDebugger.model.CounterexampleParser;
import smvDebugger.panel.DebugPanelService;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import smvDebugger.plugin.SmvBinaryPaths_PreferencesComponent;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import java.nio.file.Path;
import javax.swing.JComponent;
import org.fbme.lib.iec61499.declarations.CompositeFBTypeDeclaration;
import java.util.Optional;
import java.nio.file.Files;
import java.util.List;
import smvDebugger.model.Counterexample;
import java.io.IOException;
import javax.swing.JOptionPane;

public class SmvDebugger {
  private static final String FB_FILE_EXTENSION = ".xml";

  private final MPSProject project;
  private final Fb2SmvService fb2SmvService;
  private final NuSmvService nuSmvService;
  private final NutracService nutracService;
  private final CounterexampleParser counterexampleParser;
  private final DebugPanelService debugPanelService;

  public SmvDebugger(final MPSProject project) {
    this.project = project;

    final Project ideaProject = ProjectHelper.toIdeaProject(project);
    final SmvBinaryPaths_PreferencesComponent smvBinaryPaths = ideaProject.getComponent(ProjectPluginManager.class).getPrefsComponent(SmvBinaryPaths_PreferencesComponent.class);
    fb2SmvService = new Fb2SmvService(Path.of(smvBinaryPaths.getStateObject().fb2SmvPath));
    nuSmvService = new NuSmvService(Path.of(smvBinaryPaths.getStateObject().nuSmvPath));
    nutracService = new NutracService(Path.of(smvBinaryPaths.getStateObject().nutracPath));

    counterexampleParser = new CounterexampleParser();
    debugPanelService = new DebugPanelService(project);
  }

  public JComponent run(final Path fbPath, final CompositeFBTypeDeclaration compositeFb) {
    try {
      final Path smvPath = fb2SmvService.convertFbToSmv(fbPath);
      final String specification = getSpecification();

      final Optional<Path> rawCounterexamplePath = nuSmvService.getRawCounterexample(smvPath, specification);
      Files.delete(smvPath);

      if (rawCounterexamplePath.isEmpty()) {
        notifySuccess();
        return null;
      }

      final Path csvCounterexamplePath = nutracService.convertToCsv(rawCounterexamplePath.get());
      Files.delete(rawCounterexamplePath.get());

      final List<String> lines = Files.readAllLines(csvCounterexamplePath);
      Files.delete(csvCounterexamplePath);

      final Counterexample counterexample = counterexampleParser.parse(lines);
      return debugPanelService.run(compositeFb, counterexample);
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
  }

  private static String getSpecification() {
    final String specification = JOptionPane.showInputDialog(null, "Enter LTL specification");
    return specification;
  }

  private static void notifySuccess() {
    JOptionPane.showMessageDialog(null, "Success");
  }
}
