package smvDebugger.main;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import smvDebugger.integration.Fb2SmvService;
import smvDebugger.integration.NuSmvService;
import smvDebugger.integration.NutracService;
import smvDebugger.model.CounterexampleParser;
import smvDebugger.panel.DebugPanelService;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import smvDebugger.plugin.SmvBinaryPaths_PreferencesComponent;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import java.nio.file.Path;
import javax.swing.JComponent;
import org.fbme.lib.iec61499.declarations.CompositeFBTypeDeclaration;
import java.util.Optional;
import java.util.List;
import java.nio.file.Files;
import java.io.IOException;
import smvDebugger.model.Counterexample;
import java.io.FileFilter;
import java.io.File;
import java.util.Objects;
import javax.swing.JOptionPane;

public class SmvDebugger {
  private static final String FB_FILE_EXTENSION = ".xml";

  private final MPSProject project;
  private final Fb2SmvService fb2SmvService;
  private final NuSmvService nuSmvService;
  private final NutracService nutracService;
  private final CounterexampleParser counterexampleParser;
  private final DebugPanelService debugPanelService;

  public SmvDebugger(final MPSProject project) {
    this.project = project;

    final Project ideaProject = ProjectHelper.toIdeaProject(project);
    final SmvBinaryPaths_PreferencesComponent smvBinaryPaths = ideaProject.getComponent(ProjectPluginManager.class).getPrefsComponent(SmvBinaryPaths_PreferencesComponent.class);
    fb2SmvService = new Fb2SmvService(Path.of(smvBinaryPaths.getStateObject().fb2SmvPath));
    nuSmvService = new NuSmvService(Path.of(smvBinaryPaths.getStateObject().nuSmvPath));
    nutracService = new NutracService(Path.of(smvBinaryPaths.getStateObject().nutracPath));

    counterexampleParser = new CounterexampleParser();
    debugPanelService = new DebugPanelService(project);
  }

  public JComponent run(final CompositeFBTypeDeclaration compositeFb) {
    final Path fbPath = getFbPath(project, compositeFb);
    final Path smvPath = fb2SmvService.convertFbToSmv(fbPath);
    final String specification = getSpecification();

    final Optional<Path> rawcCounterexamplePath = nuSmvService.getRawCounterexample(smvPath, specification);
    if (rawcCounterexamplePath.isEmpty()) {
      notifySuccess();
      return null;
    }

    final Path csvCounterexamplePath = nutracService.convertToCsv(rawcCounterexamplePath.get());
    final List<String> lines;
    try {
      lines = Files.readAllLines(csvCounterexamplePath);
    } catch (final IOException e) {
      throw new RuntimeException(e);
    }
    final Counterexample counterexample = counterexampleParser.parse(lines);

    return debugPanelService.run(compositeFb, counterexample);
  }

  private static Path getFbPath(final MPSProject project, final CompositeFBTypeDeclaration fb) {
    return project.getProjectFile().listFiles(new FileFilter() {
      public boolean accept(final File it) {
        return Objects.equals(it.getName(), fb.getName() + FB_FILE_EXTENSION);
      }
    })[0].toPath();
  }

  private static String getSpecification() {
    final String specification = JOptionPane.showInputDialog(null, "Enter LTL specification");
    return specification;
  }

  private static void notifySuccess() {
    JOptionPane.showMessageDialog(null, "Success");
  }
}
