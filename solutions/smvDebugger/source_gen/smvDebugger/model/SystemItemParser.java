package smvDebugger.model;

/*Generated by MPS */

import java.util.Objects;

public class SystemItemParser {
  private static final String FULL_NAME_DELIMITER = "[.]";
  private static final String EVENT_PORT_DELIMITER = "_";
  private static final String TIME_EVENT_PORT_VALUE = "value";
  private static final String ECC_END_FEATURE = "Q_smv";
  private static final String ECC_ITEM_NAME = "ECC";

  public SystemItem parse(final String fullName) {
    final String[] nameParts = fullName.split(FULL_NAME_DELIMITER);

    final SystemItemType type;
    if (isEventPort(nameParts)) {
      type = SystemItemType.EVENT_PORT;
    } else if (isDataPort(nameParts)) {
      type = SystemItemType.DATA_PORT;
    } else if (isECC(nameParts)) {
      type = SystemItemType.ECC;
    } else {
      return null;
    }

    final String fbName = getFbName(nameParts, type);
    final String itemName = getItemName(nameParts, type);

    return new SystemItem(fullName, fbName, itemName, type);
  }

  private boolean isEventPort(final String[] nameParts) {
    return isPort(nameParts) && nameParts[1].contains(EVENT_PORT_DELIMITER) && (nameParts.length == 2 || Objects.equals(nameParts[2], TIME_EVENT_PORT_VALUE));
  }

  private boolean isDataPort(final String[] nameParts) {
    return isPort(nameParts) && nameParts.length > 2;
  }

  private boolean isECC(final String[] nameParts) {
    return nameParts.length == 3 && Objects.equals(nameParts[2], ECC_END_FEATURE);
  }

  private boolean isPort(final String[] nameParts) {
    return nameParts.length > 1;
  }

  private String getFbName(final String[] nameParts, final SystemItemType type) {
    switch (type) {
      case EVENT_PORT:
        return nameParts[1].split(EVENT_PORT_DELIMITER)[0];
      case DATA_PORT:
      case ECC:
        return nameParts[1];
      default:
        return null;
    }
  }

  private String getItemName(final String[] nameParts, final SystemItemType type) {
    switch (type) {
      case EVENT_PORT:
        return nameParts[1].split(EVENT_PORT_DELIMITER)[1];
      case DATA_PORT:
        return nameParts[2];
      case ECC:
        return ECC_ITEM_NAME;
      default:
        return null;
    }
  }
}
