package smvDebugger.model;

/*Generated by MPS */

import java.util.Objects;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class Counterexample {
  public static final String T_GLOBAL = "TGlobal";

  private final SystemItem[] items;
  private final String[] states;
  private final String[][] values;
  private final String[] timeValues;

  public Counterexample(final SystemItem[] items, final String[] states, final String[][] values, final String[] timeValues) {
    this.items = items;
    this.states = states;
    this.values = values;
    this.timeValues = timeValues;
  }

  public SystemItem[] getItems() {
    return items;
  }

  public String[] getStates() {
    return states;
  }

  public String[][] getValues() {
    return values;
  }

  public String[] getTimeValues() {
    return timeValues;
  }

  public int size() {
    return states.length;
  }

  public SystemItem getItem(final String itemSimpleName) {
    for (final SystemItem item : getItems()) {
      if (Objects.equals(item.getSimpleName(), itemSimpleName)) {
        return item;
      }
    }
    return null;
  }

  public SystemItemValue getItemValue(final int itemIndex, final int stateIndex) {
    return new SystemItemValue(items[itemIndex], values[itemIndex][stateIndex]);
  }

  public SystemItemValue getItemValue(final String itemSimpleName, final int stateIndex) {
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      final SystemItem item = items[itemIndex];
      if (Objects.equals(item.getSimpleName(), itemSimpleName)) {
        return new SystemItemValue(item, values[stateIndex]);
      }
    }
    return null;
  }

  public List<SystemItemValue> getItemValues(final List<String> itemSimpleNames, final int stateIndex) {
    final Set<String> itemSimpleNameSet = new HashSet<String>(itemSimpleNames);
    final List<SystemItemValue> itemValues = new ArrayList<SystemItemValue>();
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      final SystemItem item = items[itemIndex];
      if (itemSimpleNameSet.contains(item.getSimpleName())) {
        itemValues.add(new SystemItemValue(item, values[itemIndex][stateIndex]));
      }
    }
    return itemValues;
  }

  public Map<SystemItem, String> getItemToValueMap(final int stateIndex) {
    final Map<SystemItem, String> itemToValueMap = new HashMap<SystemItem, String>();
    for (int itemIndex = 0; itemIndex < items.length; itemIndex++) {
      itemToValueMap.put(items[itemIndex], values[itemIndex][stateIndex]);
    }
    return itemToValueMap;
  }

  public int indexOf(final String state) {
    for (int i = 0; i < states.length; i++) {
      if (Objects.equals(states[i], state)) {
        return i;
      }
    }
    return -1;
  }
}
