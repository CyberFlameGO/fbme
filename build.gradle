import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.RunAntScript

ext.mpsMajor = "2019.3"
ext.mpsMinor = "4"

buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
    }
    dependencies {
        classpath "de.itemis.mps:mps-gradle-plugin:1.2+"
        classpath 'de.undercouch:gradle-download-task:4.0.4'
    }
}

apply plugin: 'de.undercouch.download'

repositories {
    maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    ivy {
        url "https://download.jetbrains.com/mps/$mpsMajor/"
        layout 'pattern', {
            artifact "[module]-[revision].[ext]"
        }
        metadataSources { // skip downloading ivy.xml
            artifact()
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

configurations {
    mps
    ant_lib
}

dependencies {
    mps "com.jetbrains:MPS:$mpsMajor.$mpsMinor@zip"
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

task downloadJBRZip(type: Download) {
    src "https://jetbrains.bintray.com/intellij-jbr/jbrsdk-11_0_6-osx-x64-b520.43.tar.gz"
    dest file('lib/jbr.tar.gz')
    overwrite false
}

task downloadJBR(type: Copy, dependsOn: downloadJBRZip) {
    from tarTree('lib/jbr.tar.gz')
    into file('lib/jbr')
}

task downloadDependencies(type: Copy) {
    dependsOn configurations.mps

    configurations.mps.files.each {
        from zipTree(it)
    }
    into 'lib'
}


ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = configurations.ant_lib.fileCollection { true }

task prepare(dependsOn: [downloadDependencies, ':code:library:prepare'])

task buildBootstrap(type: BuildLanguages, dependsOn: prepare) {
    script 'build-bootstrap.xml'
    scriptArgs = ["-Dbasedir=${file('.')}"]
}

task generate_platform(type: RunAntScript, dependsOn: [buildBootstrap]) {
    script 'code/platform/build.xml'
    targets 'generate'
    scriptArgs = ["-Dbasedir=${file('code/platform')}"]
}

task generate_scenes(type: RunAntScript, dependsOn: buildBootstrap) {
    script 'code/scenes/build.xml'
    targets 'generate'
    scriptArgs = ["-Dbasedir=${file('code/scenes')}"]
}

task generate_richediting(type: RunAntScript, dependsOn: [buildBootstrap, generate_scenes]) {
    script 'code/richediting/build.xml'
    targets 'generate'
    scriptArgs = ["-Dbasedir=${file('code/richediting')}"]
}

task generate_fordiac(type: RunAntScript, dependsOn: [buildBootstrap, generate_platform]) {
    script 'code/4diac-integration/build.xml'
    targets 'generate'
    scriptArgs = ["-Dbasedir=${file('code/4diac-integration')}"]
}

task generate(dependsOn: [generate_platform, generate_scenes, generate_richediting, generate_fordiac])

task build_library(type: RunAntScript, dependsOn: buildBootstrap) {
    script 'code/library/build.xml'
    scriptArgs = ["-Dbasedir=${file('code/library')}"]
    targets 'clean', 'assemble'
}

task build_platform(type: BuildLanguages, dependsOn: [buildBootstrap, build_library]) {
    script 'code/platform/build.xml'
    scriptArgs = ["-Dbasedir=${file('code/platform')}"]
}

task build_scenes(type: BuildLanguages, dependsOn: buildBootstrap) {
    script 'code/scenes/build.xml'
    scriptArgs = ["-Dbasedir=${file('code/scenes')}"]
}

task build_richediting(type: BuildLanguages, dependsOn: [buildBootstrap, build_platform, build_scenes]) {
    script 'code/richediting/build.xml'
    scriptArgs = ["-Dbasedir=${file('code/richediting')}"]
}

task build_fordiac(type: BuildLanguages, dependsOn: [buildBootstrap, build_platform]) {
    script 'code/4diac-integration/build.xml'
    scriptArgs = ["-Dbasedir=${file('code/4diac-integration')}"]
}

task buildPlugin(dependsOn: [build_library, build_platform, build_scenes, build_richediting, build_fordiac])

task $buildRcp(type: BuildLanguages, dependsOn: buildPlugin) {
    script 'build/build-rcp.xml'
}

task copyStartupScripts(type: Copy, dependsOn: buildBootstrap) {
    from 'code/buildscripts/solutions/org.fbme.ide.build/source_gen/org/fbme/ide/build'

    include '*.bat'
    include '*.sh'
    include '*.vmoptions'
    include 'Info.plist.xml'

    into 'build/startup'
}

task buildRcp(type: RunAntScript, dependsOn: [$buildRcp, copyStartupScripts]) {
    script 'build/build-rcpdistrib.xml'
    targets 'clean', 'build'
}

task buildRcpWithJBR(type: RunAntScript, dependsOn: [$buildRcp, copyStartupScripts, downloadJBR]) {
    script 'build/build-rcpdistrib-jbr.xml'
    targets 'clean', 'build'
}

task clean(type: Delete, dependsOn: ':code:library:clean') {
    delete 'build'
    delete 'lib'
    delete fileTree('.').matching {
        include '**/source_gen/**'
        include '**/source_gen.caches/**'
        include '**/classes_gen/**'
    }
}