ext.mpsMajor = "2018.3"
ext.mpsMinor = "6"
ext.mbeddrBuildNumber = "1.2.+"

buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
    }
    dependencies {
        classpath "de.itemis.mps:mps-gradle-plugin:1.2+"
    }
}

repositories {
    maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    mavenCentral()
    ivy {
        url "https://download.jetbrains.com/mps/$mpsMajor/"
        layout 'pattern', {
            artifact "[module]-[revision].[ext]"
        }
        metadataSources { // skip downloading ivy.xml
            artifact()
        }
    }
}

configurations {
    mps
    ant_lib
}

dependencies {
    mps "com.jetbrains:MPS:$mpsMajor.${mpsMinor}@zip"
    mps "com.mbeddr:platform:$mbeddrBuildNumber"
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

task downloadDependencies(type: Copy) {
    dependsOn configurations.mps

    configurations.mps.files.each {
        from zipTree(it)
    }
    into 'lib'
}

import de.itemis.mps.gradle.*

ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = configurations.ant_lib.fileCollection { true }
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = ["-Dbasedir=."]

task prepare(dependsOn: [downloadDependencies, ':st-parser:prepare'])

task buildBootstrap(type: BuildLanguages, dependsOn: prepare) {
    script 'build-bootstrap.xml'
}

task generate(type: RunAntScript, dependsOn: buildBootstrap) {
    script 'build/build-plugin.xml'
    targets 'generate'
}

task buildPlugin(type: BuildLanguages, dependsOn: buildBootstrap) {
    script 'build/build-plugin.xml'
}

task $buildRcp(type: BuildLanguages, dependsOn: buildPlugin) {
    script 'build/build-rcp.xml'
}

task copyStartupScripts(type: Copy, dependsOn: buildBootstrap) {
    from 'solutions/iec61499.build/source_gen/iec61499/build'

    include '*.bat'
    include '*.sh'
    include '*.vmoptions'
    include 'Info.plist.xml'

    into 'build/startup'
}

task buildRcp(type: RunAntScript, dependsOn: [$buildRcp, copyStartupScripts]) {
    script 'build/build-rcpdistrib.xml'
    targets 'clean', 'build'
}

task clean(type: Delete, dependsOn: ':st-parser:clean') {
    delete 'build'
    delete 'lib'
    delete fileTree('.').matching {
        include '**/source_gen/**'
        include '**/source_gen.caches/**'
        include '**/classes_gen/**'
    }
}